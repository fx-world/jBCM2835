/*
 * COPYRIGHT_START
 * 
 * jBCM2835 is a Java Wrapper for the BCM2835 C library from Mike McCauley.
 * Copyright (C) 2015 Pascal Weyprecht
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * COPYRIGHT_END
 *
 * Contributors:
 *    Mike McCauley - original C header file
 *    JNAerator - conversion from C header file
 *    Pascal Weyprecht - convenience upgrades
 */
package de.fxworld.jbcm2835;

import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.ptr.IntByReference;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;

/**
 * JNA Wrapper for library <b>bcm2835</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class JBcm2835Library implements Library {
	
	public static final String JNA_LIBRARY_NAME = "bcm2835";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(JBcm2835Library.JNA_LIBRARY_NAME);
	
	static {
		Native.register(JBcm2835Library.class, JBcm2835Library.JNA_NATIVE_LIB);
	}
	
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_VERSION = (int)10042;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final byte HIGH = (int)0x1;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final byte LOW = (int)0x0;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_CORE_CLK_HZ = (int)250000000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final String BMC2835_RPI2_DT_FILENAME = (String)"/proc/device-tree/soc/ranges";
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BMC2835_RPI2_DT_PERI_BASE_ADDRESS_OFFSET = (int)4;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BMC2835_RPI2_DT_PERI_SIZE_OFFSET = (int)8;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PERI_BASE = (int)0x20000000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PERI_SIZE = (int)0x01000000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_ST_BASE = (int)0x3000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPIO_PADS = (int)0x100000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_CLOCK_BASE = (int)0x101000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPIO_BASE = (int)0x200000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_BASE = (int)0x204000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC0_BASE = (int)0x205000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPIO_PWM = (int)0x20C000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC1_BASE = (int)0x804000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PAGE_SIZE = (int)(4 * 1024);
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BLOCK_SIZE = (int)(4 * 1024);
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPFSEL0 = (int)0x0000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPFSEL1 = (int)0x0004;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPFSEL2 = (int)0x0008;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPFSEL3 = (int)0x000c;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPFSEL4 = (int)0x0010;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPFSEL5 = (int)0x0014;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPSET0 = (int)0x001c;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPSET1 = (int)0x0020;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPCLR0 = (int)0x0028;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPCLR1 = (int)0x002c;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPLEV0 = (int)0x0034;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPLEV1 = (int)0x0038;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPEDS0 = (int)0x0040;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPEDS1 = (int)0x0044;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPREN0 = (int)0x004c;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPREN1 = (int)0x0050;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPFEN0 = (int)0x0058;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPFEN1 = (int)0x005c;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPHEN0 = (int)0x0064;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPHEN1 = (int)0x0068;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPLEN0 = (int)0x0070;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPLEN1 = (int)0x0074;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPAREN0 = (int)0x007c;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPAREN1 = (int)0x0080;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPAFEN0 = (int)0x0088;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPAFEN1 = (int)0x008c;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPPUD = (int)0x0094;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPPUDCLK0 = (int)0x0098;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_GPPUDCLK1 = (int)0x009c;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PADS_GPIO_0_27 = (int)0x002c;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PADS_GPIO_28_45 = (int)0x0030;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PADS_GPIO_46_53 = (int)0x0034;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PAD_PASSWRD = (int)(0x5A << 24);
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PAD_SLEW_RATE_UNLIMITED = (int)0x10;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PAD_HYSTERESIS_ENABLED = (int)0x08;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PAD_DRIVE_2mA = (int)0x00;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PAD_DRIVE_4mA = (int)0x01;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PAD_DRIVE_6mA = (int)0x02;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PAD_DRIVE_8mA = (int)0x03;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PAD_DRIVE_10mA = (int)0x04;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PAD_DRIVE_12mA = (int)0x05;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PAD_DRIVE_14mA = (int)0x06;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PAD_DRIVE_16mA = (int)0x07;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_CS = (int)0x0000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_FIFO = (int)0x0004;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_CLK = (int)0x0008;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_DLEN = (int)0x000c;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_LTOH = (int)0x0010;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_DC = (int)0x0014;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_CS_LEN_LONG = (int)0x02000000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_CS_DMA_LEN = (int)0x01000000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_CS_CSPOL2 = (int)0x00800000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_CS_CSPOL1 = (int)0x00400000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_CS_CSPOL0 = (int)0x00200000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_CS_RXF = (int)0x00100000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_CS_RXR = (int)0x00080000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_CS_TXD = (int)0x00040000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_CS_RXD = (int)0x00020000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_CS_DONE = (int)0x00010000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_CS_TE_EN = (int)0x00008000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_CS_LMONO = (int)0x00004000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_CS_LEN = (int)0x00002000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_CS_REN = (int)0x00001000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_CS_ADCS = (int)0x00000800;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_CS_INTR = (int)0x00000400;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_CS_INTD = (int)0x00000200;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_CS_DMAEN = (int)0x00000100;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_CS_TA = (int)0x00000080;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_CS_CSPOL = (int)0x00000040;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_CS_CLEAR = (int)0x00000030;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_CS_CLEAR_RX = (int)0x00000020;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_CS_CLEAR_TX = (int)0x00000010;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_CS_CPOL = (int)0x00000008;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_CS_CPHA = (int)0x00000004;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_SPI0_CS_CS = (int)0x00000003;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC_C = (int)0x0000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC_S = (int)0x0004;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC_DLEN = (int)0x0008;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC_A = (int)0x000c;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC_FIFO = (int)0x0010;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC_DIV = (int)0x0014;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC_DEL = (int)0x0018;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC_CLKT = (int)0x001c;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC_C_I2CEN = (int)0x00008000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC_C_INTR = (int)0x00000400;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC_C_INTT = (int)0x00000200;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC_C_INTD = (int)0x00000100;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC_C_ST = (int)0x00000080;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC_C_CLEAR_1 = (int)0x00000020;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC_C_CLEAR_2 = (int)0x00000010;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC_C_READ = (int)0x00000001;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC_S_CLKT = (int)0x00000200;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC_S_ERR = (int)0x00000100;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC_S_RXF = (int)0x00000080;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC_S_TXE = (int)0x00000040;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC_S_RXD = (int)0x00000020;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC_S_TXD = (int)0x00000010;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC_S_RXR = (int)0x00000008;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC_S_TXW = (int)0x00000004;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC_S_DONE = (int)0x00000002;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC_S_TA = (int)0x00000001;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_BSC_FIFO_SIZE = (int)16;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_ST_CS = (int)0x0000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_ST_CLO = (int)0x0004;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_ST_CHI = (int)0x0008;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PWM_CONTROL = (int)0;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PWM_STATUS = (int)1;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PWM_DMAC = (int)2;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PWM0_RANGE = (int)4;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PWM0_DATA = (int)5;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PWM_FIF1 = (int)6;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PWM1_RANGE = (int)8;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PWM1_DATA = (int)9;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PWMCLK_CNTL = (int)40;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PWMCLK_DIV = (int)41;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PWM_PASSWRD = (int)(0x5A << 24);
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PWM1_MS_MODE = (int)0x8000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PWM1_USEFIFO = (int)0x2000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PWM1_REVPOLAR = (int)0x1000;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PWM1_OFFSTATE = (int)0x0800;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PWM1_REPEATFF = (int)0x0400;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PWM1_SERIAL = (int)0x0200;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PWM1_ENABLE = (int)0x0100;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PWM0_MS_MODE = (int)0x0080;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PWM_CLEAR_FIFO = (int)0x0040;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PWM0_USEFIFO = (int)0x0020;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PWM0_REVPOLAR = (int)0x0010;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PWM0_OFFSTATE = (int)0x0008;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PWM0_REPEATFF = (int)0x0004;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PWM0_SERIAL = (int)0x0002;
	/** <i>native declaration : src\main\c\bcm2835.h</i> */
	public static final int BCM2835_PWM0_ENABLE = (int)0x0001;
	
	private static boolean inited = false;
	
	/**
	 * Initialise the library by opening /dev/mem and getting pointers to the 
     * internal memory for BCM 2835 device registers. You must call this (successfully)
     * before calling any other 
     * functions in this library (except bcm2835_set_debug). 
     * If bcm2835_init() fails by returning 0, 
     * calling any other function may result in crashes or other failures.
     * Prints messages to stderr in case of errors.
	 * @return 1 if successful else 0
	 */
	public static synchronized int init() {
		int result = 1;
		
		if (!inited) {
			result = bcm2835_init();
			
			if (result == 1) {
				inited = true;
			}
		}
		
		return result;
	}
	
	/**
	 * Close the library, deallocating any allocated memory and closing /dev/mem
	 * @return 1 if successful else 0
	 */
	public static synchronized int close() {
		int result = 1;
		
		if (inited) {
			result = bcm2835_init();
			
			if (result == 1) {
				inited = false;
			}
		}
		
		return result;
	}
	
	/**
	 * Original signature : <code>int bcm2835_init()</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:576</i>
	 */
	private static native int bcm2835_init();
	/**
	 * Original signature : <code>int bcm2835_close()</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:581</i>
	 */
	private static native int bcm2835_close();
	/**
	 * Original signature : <code>void bcm2835_set_debug(uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:590</i>
	 */
	public static native void bcm2835_set_debug(byte debug);
	/**
	 * Original signature : <code>int bcm2835_version()</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:595</i>
	 */
	public static native int bcm2835_version();
	/**
	 * Original signature : <code>uint32_t* bcm2835_regbase(uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:612</i>
	 */
	public static native IntByReference bcm2835_regbase(byte regbase);
	
	/**
	 * Original signature : <code>uint32_t bcm2835_peri_read(volatile uint32_t*)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:622</i>
	 */
	public static native int bcm2835_peri_read(IntBuffer paddr);
	
	/**
	 * Original signature : <code>uint32_t bcm2835_peri_read_nb(volatile uint32_t*)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:634</i>
	 */
	public static native int bcm2835_peri_read_nb(IntBuffer paddr);
	
	/**
	 * Original signature : <code>void bcm2835_peri_write(volatile uint32_t*, uint32_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:648</i>
	 */
	public static native void bcm2835_peri_write(IntBuffer paddr, int value);
	
	/**
	 * Original signature : <code>void bcm2835_peri_write_nb(volatile uint32_t*, uint32_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:662</i>
	 */
	public static native void bcm2835_peri_write_nb(IntBuffer paddr, int value);
	
	/**
	 * Original signature : <code>void bcm2835_peri_set_bits(volatile uint32_t*, uint32_t, uint32_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:676</i>
	 */
	public static native void bcm2835_peri_set_bits(IntBuffer paddr, int value, int mask);
	
	public static void bcm2835_gpio_fsel(RPiGPIOPin pin, FunctionSelect mode) {
		bcm2835_gpio_fsel(pin.getValue(), mode.getValue());
	}
	
	/**
	 * Original signature : <code>void bcm2835_gpio_fsel(uint8_t, uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:690</i>
	 */
	public static native void bcm2835_gpio_fsel(byte pin, byte mode);
	/**
	 * Original signature : <code>void bcm2835_gpio_set(uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:697</i>
	 */
	public static native void bcm2835_gpio_set(byte pin);
	/**
	 * Original signature : <code>void bcm2835_gpio_clr(uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:704</i>
	 */
	public static native void bcm2835_gpio_clr(byte pin);
	/**
	 * Original signature : <code>void bcm2835_gpio_set_multi(uint32_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:711</i>
	 */
	public static native void bcm2835_gpio_set_multi(int mask);
	/**
	 * Original signature : <code>void bcm2835_gpio_clr_multi(uint32_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:718</i>
	 */
	public static native void bcm2835_gpio_clr_multi(int mask);
	/**
	 * Original signature : <code>uint8_t bcm2835_gpio_lev(uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:726</i>
	 */
	public static native byte bcm2835_gpio_lev(byte pin);
	/**
	 * Original signature : <code>uint8_t bcm2835_gpio_eds(uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:736</i>
	 */
	public static native byte bcm2835_gpio_eds(byte pin);
	/**
	 * Original signature : <code>void bcm2835_gpio_set_eds(uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:743</i>
	 */
	public static native void bcm2835_gpio_set_eds(byte pin);
	/**
	 * Original signature : <code>void bcm2835_gpio_ren(uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:753</i>
	 */
	public static native void bcm2835_gpio_ren(byte pin);
	/**
	 * Original signature : <code>void bcm2835_gpio_clr_ren(uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:758</i>
	 */
	public static native void bcm2835_gpio_clr_ren(byte pin);
	/**
	 * Original signature : <code>void bcm2835_gpio_fen(uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:768</i>
	 */
	public static native void bcm2835_gpio_fen(byte pin);
	/**
	 * Original signature : <code>void bcm2835_gpio_clr_fen(uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:773</i>
	 */
	public static native void bcm2835_gpio_clr_fen(byte pin);
	/**
	 * Original signature : <code>void bcm2835_gpio_hen(uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:779</i>
	 */
	public static native void bcm2835_gpio_hen(byte pin);
	/**
	 * Original signature : <code>void bcm2835_gpio_clr_hen(uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:784</i>
	 */
	public static native void bcm2835_gpio_clr_hen(byte pin);
	/**
	 * Original signature : <code>void bcm2835_gpio_len(uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:790</i>
	 */
	public static native void bcm2835_gpio_len(byte pin);
	/**
	 * Original signature : <code>void bcm2835_gpio_clr_len(uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:795</i>
	 */
	public static native void bcm2835_gpio_clr_len(byte pin);
	/**
	 * Original signature : <code>void bcm2835_gpio_aren(uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:803</i>
	 */
	public static native void bcm2835_gpio_aren(byte pin);
	/**
	 * Original signature : <code>void bcm2835_gpio_clr_aren(uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:808</i>
	 */
	public static native void bcm2835_gpio_clr_aren(byte pin);
	/**
	 * Original signature : <code>void bcm2835_gpio_afen(uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:816</i>
	 */
	public static native void bcm2835_gpio_afen(byte pin);
	/**
	 * Original signature : <code>void bcm2835_gpio_clr_afen(uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:821</i>
	 */
	public static native void bcm2835_gpio_clr_afen(byte pin);
	/**
	 * Original signature : <code>void bcm2835_gpio_pud(uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:829</i>
	 */
	public static native void bcm2835_gpio_pud(byte pud);
	/**
	 * Original signature : <code>void bcm2835_gpio_pudclk(uint8_t, uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:837</i>
	 */
	public static native void bcm2835_gpio_pudclk(byte pin, byte on);
	/**
	 * Original signature : <code>uint32_t bcm2835_gpio_pad(uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:843</i>
	 */
	public static native int bcm2835_gpio_pad(byte group);
	/**
	 * Original signature : <code>void bcm2835_gpio_set_pad(uint8_t, uint32_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:851</i>
	 */
	public static native void bcm2835_gpio_set_pad(byte group, int control);
	/**
	 * Original signature : <code>void bcm2835_delay(unsigned int)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:863</i>
	 */
	public static native void bcm2835_delay(int millis);
	/**
	 * Original signature : <code>void bcm2835_delayMicroseconds(uint64_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:878</i>
	 */
	public static native void bcm2835_delayMicroseconds(long micros);
	
	public static void bcm2835_gpio_write(RPiGPIOPin pin, byte on) {
		bcm2835_gpio_write(pin.getValue(), on);
	}
	
	/**
	 * Original signature : <code>void bcm2835_gpio_write(uint8_t, uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:884</i>
	 */
	public static native void bcm2835_gpio_write(byte pin, byte on);
	/**
	 * Original signature : <code>void bcm2835_gpio_write_multi(uint32_t, uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:890</i>
	 */
	public static native void bcm2835_gpio_write_multi(int mask, byte on);
	/**
	 * Original signature : <code>void bcm2835_gpio_write_mask(uint32_t, uint32_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:896</i>
	 */
	public static native void bcm2835_gpio_write_mask(int value, int mask);
	/**
	 * Original signature : <code>void bcm2835_gpio_set_pud(uint8_t, uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:903</i>
	 */
	public static native void bcm2835_gpio_set_pud(byte pin, byte pud);
	/**
	 * Original signature : <code>void bcm2835_spi_begin()</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:920</i>
	 */
	public static native void bcm2835_spi_begin();
	/**
	 * Original signature : <code>void bcm2835_spi_end()</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:926</i>
	 */
	public static native void bcm2835_spi_end();
	
	public static void bcm2835_spi_setBitOrder(SPIBitOrder order) {
		bcm2835_spi_setBitOrder(order.getValue());
	}
	
	/**
	 * Original signature : <code>void bcm2835_spi_setBitOrder(uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:934</i>
	 */
	public static native void bcm2835_spi_setBitOrder(byte order);
	
	public static void bcm2835_spi_setClockDivider(SPIClockDivider divider) {
		bcm2835_spi_setClockDivider(divider.getValue());
	}
	
	/**
	 * Original signature : <code>void bcm2835_spi_setClockDivider(uint16_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:941</i>
	 */
	public static native void bcm2835_spi_setClockDivider(short divider);
		
	public static void bcm2835_spi_setDataMode(SPIMode mode) {
		bcm2835_spi_setDataMode(mode.getValue());
	}
	
	/**
	 * Original signature : <code>void bcm2835_spi_setDataMode(uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:948</i>
	 */
	public static native void bcm2835_spi_setDataMode(byte mode);
	
	public static void bcm2835_spi_chipSelect(SPIChipSelect cs) {
		bcm2835_spi_chipSelect(cs.getValue());
	}
	
	/**
	 * Original signature : <code>void bcm2835_spi_chipSelect(uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:956</i>
	 */
	public static native void bcm2835_spi_chipSelect(byte cs);
	/**
	 * Original signature : <code>void bcm2835_spi_setChipSelectPolarity(uint8_t, uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:966</i>
	 */
	public static native void bcm2835_spi_setChipSelectPolarity(byte cs, byte active);
	/**
	 * Original signature : <code>uint8_t bcm2835_spi_transfer(uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:978</i>
	 */
	public static native byte bcm2835_spi_transfer(byte value);
	
	/**
	 * Original signature : <code>void bcm2835_spi_transfernb(char*, char*, uint32_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:991</i>
	 */
	public static native void bcm2835_spi_transfernb(ByteBuffer tbuf, ByteBuffer rbuf, int len);
	
	/**
	 * Original signature : <code>void bcm2835_spi_transfern(char*, uint32_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:1000</i>
	 */
	public static native void bcm2835_spi_transfern(ByteBuffer buf, int len);
	
	/**
	 * Original signature : <code>void bcm2835_spi_writenb(char*, uint32_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:1008</i>
	 */
	public static native void bcm2835_spi_writenb(ByteBuffer buf, int len);
	/**
	 * Original signature : <code>void bcm2835_i2c_begin()</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:1025</i>
	 */
	public static native void bcm2835_i2c_begin();
	/**
	 * Original signature : <code>void bcm2835_i2c_end()</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:1031</i>
	 */
	public static native void bcm2835_i2c_end();
	/**
	 * Original signature : <code>void bcm2835_i2c_setSlaveAddress(uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:1036</i>
	 */
	public static native void bcm2835_i2c_setSlaveAddress(byte addr);
	
	public static void bcm2835_i2c_setClockDivider(I2CClockDivider divider) {
		bcm2835_i2c_setClockDivider(divider.getValue());
	}
	
	/**
	 * Original signature : <code>void bcm2835_i2c_setClockDivider(uint16_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:1042</i>
	 */
	public static native void bcm2835_i2c_setClockDivider(short divider);
	/**
	 * Original signature : <code>void bcm2835_i2c_set_baudrate(uint32_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:1050</i>
	 */
	public static native void bcm2835_i2c_set_baudrate(int baudrate);
	
	/**
	 * Original signature : <code>uint8_t bcm2835_i2c_write(const char*, uint32_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:1058</i>
	 */
	public static native byte bcm2835_i2c_write(String buf, int len);
	
	/**
	 * Original signature : <code>uint8_t bcm2835_i2c_read(char*, uint32_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:1066</i>
	 */
	public static native byte bcm2835_i2c_read(ByteBuffer buf, int len);
	
	/**
	 * Original signature : <code>uint8_t bcm2835_i2c_read_register_rs(char*, char*, uint32_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:1082</i>
	 */
	public static native byte bcm2835_i2c_read_register_rs(ByteBuffer regaddr, ByteBuffer buf, int len);
	
	/**
	 * Original signature : <code>uint8_t bcm2835_i2c_write_read_rs(char*, uint32_t, char*, uint32_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:1094</i>
	 */
	public static native byte bcm2835_i2c_write_read_rs(ByteBuffer cmds, int cmds_len, ByteBuffer buf, int buf_len);
	/**
	 * Original signature : <code>uint64_t bcm2835_st_read()</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:1106</i>
	 */
	public static native long bcm2835_st_read();
	/**
	 * Original signature : <code>void bcm2835_st_delay(uint64_t, uint64_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:1112</i>
	 */
	public static native void bcm2835_st_delay(long offset_micros, long micros);
	/**
	 * Original signature : <code>void bcm2835_pwm_set_clock(uint32_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:1129</i>
	 */
	public static native void bcm2835_pwm_set_clock(int divisor);
	/**
	 * Original signature : <code>void bcm2835_pwm_set_mode(uint8_t, uint8_t, uint8_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:1137</i>
	 */
	public static native void bcm2835_pwm_set_mode(byte channel, byte markspace, byte enabled);
	/**
	 * Original signature : <code>void bcm2835_pwm_set_range(uint8_t, uint32_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:1144</i>
	 */
	public static native void bcm2835_pwm_set_range(byte channel, int range);
	/**
	 * Original signature : <code>void bcm2835_pwm_set_data(uint8_t, uint32_t)</code><br>
	 * <i>native declaration : src\main\c\bcm2835.h:1152</i>
	 */
	public static native void bcm2835_pwm_set_data(byte channel, int data);
}
